<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\CW_PocketTrainer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\CW_PocketTrainer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Apr 28 17:55:13 2024
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; OLED_Show3FNum &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[59]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[a7]">searchMorseCode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">searchMorseCode</a><BR>
 <LI><a href="#[ae]">insertMorseCode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae]">insertMorseCode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from ch32f10x_it.o(i.BusFault_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from bsp_adc.o(i.DMA1_Channel1_IRQHandler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from ch32f10x_it.o(i.DebugMon_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from ch32f10x_it.o(i.HardFault_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from ch32f10x_it.o(i.MemManage_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from ch32f10x_it.o(i.NMI_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from ch32f10x_it.o(i.PendSV_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[3b]">RTCAlarm_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from ch32f10x_it.o(i.SVC_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from ch32f10x_it.o(i.SysTick_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[3e]">SystemInit</a> from system_ch32f10x.o(i.SystemInit) referenced from startup_ch32f10x.o(.text)
 <LI><a href="#[14]">TAMPER_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_IRQHandler</a> from timer.o(i.TIM1_UP_IRQHandler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[3d]">USBHD_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[3c]">USBWakeUp_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[25]">USB_HP_CAN1_TX_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[26]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from ch32f10x_it.o(i.UsageFault_Handler) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_ch32f10x.o(.text) referenced from startup_ch32f10x.o(RESET)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from startup_ch32f10x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[f9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[fa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[49]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[44]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[100]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[101]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[102]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[103]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[104]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[105]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[106]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[117]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[46]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OLED_Show3FNum &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[cd]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_number
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBHD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ch32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_ch32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[45]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[de]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter2MorseCode
</UL>

<P><STRONG><a name="[cc]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Read_Info
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[52]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[11b]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[54]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[11c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[56]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>

<P><STRONG><a name="[11f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[124]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[125]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[127]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[5b]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ch32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[69]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_ExternalTrigConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[6f]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrationValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[6d]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrationValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[67]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ch32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[68]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, ch32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[6c]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrationValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[71]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[6e]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ch32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrationValue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[5d]"></a>Adc2Voltage_mV</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_adc.o(i.Adc2Voltage_mV))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adc2Voltage_mV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>AmpSD_GPIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, beep.o(i.AmpSD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AmpSD_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[64]"></a>BSP_ADC_Base_Init</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, bsp_adc.o(i.BSP_ADC_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_ADC_Base_Init &rArr; Get_CalibrationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CalibrationValue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigConvCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[72]"></a>BSP_ADC_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_adc.o(i.BSP_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_ADC_Init &rArr; BSP_ADC_Base_Init &rArr; Get_CalibrationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_NVIC_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[73]"></a>BSP_ADC_NVIC_Config</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_adc.o(i.BSP_ADC_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ADC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[74]"></a>BSP_DMA_ADC_Tx_Init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, bsp_adc.o(i.BSP_DMA_ADC_Tx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_DMA_ADC_Tx_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[7b]"></a>BSP_Flash_Read_Info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, flash.o(i.BSP_Flash_Read_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Flash_Read_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValid_Volume
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeValid_SendSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>BSP_Flash_Write_Info</STRONG> (Thumb, 178 bytes, Stack size 144 bytes, flash.o(i.BSP_Flash_Write_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_Flash_Write_Info &rArr; FLASH_BufLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock_Fast
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramPage_Fast
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock_Fast
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage_Fast
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BufReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_BufLoad
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_AutoSaveSetting
</UL>

<P><STRONG><a name="[86]"></a>Battery_TP4056_GPIO_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, battery.o(i.Battery_TP4056_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Battery_TP4056_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>Button_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(i.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Button_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[88]"></a>Button_Scan</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, key.o(i.Button_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Button_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>ClearStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw.o(i.ClearStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClearStr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_FreeType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[8b]"></a>CopyStr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw.o(i.CopyStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CopyStr &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_FreeType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[8c]"></a>DAC1_DMA_Init</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, dac.o(i.DAC1_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DAC1_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_MUSIC_Init
</UL>

<P><STRONG><a name="[8e]"></a>DAC_BUZZ_Init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dac.o(i.DAC_BUZZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_BUZZ_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_MUSIC_Init
</UL>

<P><STRONG><a name="[92]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ch32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
</UL>

<P><STRONG><a name="[93]"></a>DAC_DMACmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ch32f10x_dac.o(i.DAC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
</UL>

<P><STRONG><a name="[91]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ch32f10x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
</UL>

<P><STRONG><a name="[94]"></a>DAC_MUSIC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dac.o(i.DAC_MUSIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DAC_MUSIC_Init &rArr; DAC1_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[95]"></a>DAC_SetFreq</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dac.o(i.DAC_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_SetFreq &rArr; TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_MUSIC_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[98]"></a>DKEY_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(i.DKEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DKEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bsp_adc.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; Adc2Voltage_mV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_fabs
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc2Voltage_mV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
</UL>

<P><STRONG><a name="[77]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
</UL>

<P><STRONG><a name="[99]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
</UL>

<P><STRONG><a name="[78]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ch32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
</UL>

<P><STRONG><a name="[8d]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch32f10x_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
</UL>

<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>Delay_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, debug.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[a2]"></a>EarPhone_WAVE</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, dac.o(i.EarPhone_WAVE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EarPhone_WAVE &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[83]"></a>FLASH_BufLoad</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch32f10x_flash.o(i.FLASH_BufLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_BufLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[82]"></a>FLASH_BufReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ch32f10x_flash.o(i.FLASH_BufReset))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[81]"></a>FLASH_ErasePage_Fast</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ch32f10x_flash.o(i.FLASH_ErasePage_Fast))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[85]"></a>FLASH_Lock_Fast</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch32f10x_flash.o(i.FLASH_Lock_Fast))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[84]"></a>FLASH_ProgramPage_Fast</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ch32f10x_flash.o(i.FLASH_ProgramPage_Fast))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[80]"></a>FLASH_Unlock_Fast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ch32f10x_flash.o(i.FLASH_Unlock_Fast))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
</UL>

<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, ch32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DKEY_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_TP4056_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpSD_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[90]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[a6]"></a>GetCharFromMorseCode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw.o(i.GetCharFromMorseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetCharFromMorseCode &rArr; searchMorseCode &rArr;  searchMorseCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchMorseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_FreeType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[70]"></a>Get_CalibrationValue</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, ch32f10x_adc.o(i.Get_CalibrationValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_CalibrationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>HardWare_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.HardWare_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HardWare_Init &rArr; BSP_ADC_Init &rArr; BSP_ADC_Base_Init &rArr; Get_CalibrationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseTree_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DKEY_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_MUSIC_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_TP4056_GPIO_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpSD_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>MakeValid_SendSpeed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.MakeValid_SendSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Read_Info
</UL>

<P><STRONG><a name="[7e]"></a>MakeValid_Volume</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.MakeValid_Volume))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Read_Info
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>MorseTree_Init</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, cw.o(i.MorseTree_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MorseTree_Init &rArr; insertMorseCode &rArr;  insertMorseCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertMorseCode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createMorseTree
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ch32f10x_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_NVIC_Config
</UL>

<P><STRONG><a name="[a9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ch32f10x_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[b6]"></a>OLED_Clear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>OLED_Display_On</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(i.OLED_Display_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Display_On &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[b1]"></a>OLED_DrawDah</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oled_ui.o(i.OLED_DrawDah))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_DrawDah &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
</UL>

<P><STRONG><a name="[b3]"></a>OLED_DrawDit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, oled_ui.o(i.OLED_DrawDit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_DrawDit &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
</UL>

<P><STRONG><a name="[b5]"></a>OLED_DrawPoint</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar_2216
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCH_16
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_MyPic2012
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_MyPic1616
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRect
</UL>

<P><STRONG><a name="[b4]"></a>OLED_DrawRect</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, oled.o(i.OLED_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_DrawRect &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_VolumeDisplay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SendSpeedDisplay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
</UL>

<P><STRONG><a name="[b2]"></a>OLED_Fill</STRONG> (Thumb, 90 bytes, Stack size 44 bytes, oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_VolumeDisplay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SendSpeedDisplay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_AutoSaveSetting
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawDit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawDah
</UL>

<P><STRONG><a name="[aa]"></a>OLED_Init</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[b7]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>OLED_Show3FNum</STRONG> (Thumb, 618 bytes, Stack size 64 bytes, oled.o(i.OLED_Show3FNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OLED_Show3FNum &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>OLED_ShowCH_16</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, oled.o(i.OLED_ShowCH_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_ShowCH_16 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_VolumeDisplay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SendSpeedDisplay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>OLED_ShowChar</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[bf]"></a>OLED_ShowChar_2216</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowChar_2216))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ShowChar_2216 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>OLED_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
</UL>

<P><STRONG><a name="[ba]"></a>OLED_ShowString</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_MorceCode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>OLED_Show_MyPic1616</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, oled.o(i.OLED_Show_MyPic1616))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Show_MyPic1616 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_EarPhoneCheck
</UL>

<P><STRONG><a name="[c2]"></a>OLED_Show_MyPic2012</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, oled.o(i.OLED_Show_MyPic2012))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Show_MyPic2012 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
</UL>

<P><STRONG><a name="[b0]"></a>OLED_WR_Byte</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[76]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC1_DMA_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DMA_ADC_Tx_Init
</UL>

<P><STRONG><a name="[8f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_DAC_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
</UL>

<P><STRONG><a name="[62]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DKEY_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_TP4056_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpSD_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_BUZZ_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Base_Init
</UL>

<P><STRONG><a name="[5c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ch32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>StrAppend</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, oled_ui.o(i.StrAppend))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_MorceCode
</UL>

<P><STRONG><a name="[a1]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch32f10x_misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_ch32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72_HSE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>TASK_BlindType</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, timer.o(i.TASK_BlindType))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK_BlindType &rArr; DAC_SetFreq &rArr; TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2letter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_number
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharFromMorseCode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>TASK_FreeType</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, timer.o(i.TASK_FreeType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TASK_FreeType &rArr; GetCharFromMorseCode &rArr; searchMorseCode &rArr;  searchMorseCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharFromMorseCode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>TASK_ListenType</STRONG> (Thumb, 808 bytes, Stack size 24 bytes, timer.o(i.TASK_ListenType))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK_ListenType &rArr; DAC_SetFreq &rArr; TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2letter
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter2MorseCode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>TASK_RandType</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, timer.o(i.TASK_RandType))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK_RandType &rArr; DAC_SetFreq &rArr; TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2letter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharFromMorseCode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>TIM1_TASK_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, timer.o(i.TIM1_TASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM1_TASK_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[2b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, timer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIM1_UP_IRQHandler &rArr; TASK_RandType &rArr; DAC_SetFreq &rArr; TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_FreeType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>TIM3_DAC_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dac.o(i.TIM3_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
</UL>

<P><STRONG><a name="[d1]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ch32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_FreeType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[d2]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ch32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
</UL>

<P><STRONG><a name="[d3]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ch32f10x_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_DAC_Init
</UL>

<P><STRONG><a name="[cf]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ch32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TASK_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_DAC_Init
</UL>

<P><STRONG><a name="[d4]"></a>UI_AutoSaveSetting</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, oled_ui.o(i.UI_AutoSaveSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UI_AutoSaveSetting &rArr; BSP_Flash_Write_Info &rArr; FLASH_BufLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_System_Setting
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Write_Info
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>UI_DrawBattery</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, oled_ui.o(i.UI_DrawBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UI_DrawBattery &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_MyPic2012
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>UI_DrawDitDah</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled_ui.o(i.UI_DrawDitDah))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UI_DrawDitDah &rArr; OLED_DrawDit &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawDit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawDah
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_MorceCode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>UI_EarPhoneCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled_ui.o(i.UI_EarPhoneCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UI_EarPhoneCheck &rArr; OLED_Show_MyPic1616 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_MyPic1616
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>UI_MorceCode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, oled_ui.o(i.UI_MorceCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UI_MorceCode &rArr; UI_DrawDitDah &rArr; OLED_DrawDit &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>UI_SendSpeedDisplay</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, oled_ui.o(i.UI_SendSpeedDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UI_SendSpeedDisplay &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCH_16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>UI_ShowMode</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, oled_ui.o(i.UI_ShowMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI_ShowMode &rArr; OLED_ShowCH_16 &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCH_16
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>UI_VolumeDisplay</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, oled_ui.o(i.UI_VolumeDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UI_VolumeDisplay &rArr; OLED_Fill &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCH_16
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>Update_System_Setting</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash.o(i.Update_System_Setting))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_AutoSaveSetting
</UL>

<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ch32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ch32f10x.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>createMorseTree</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cw.o(i.createMorseTree))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseTree_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertMorseCode
</UL>

<P><STRONG><a name="[89]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, debug.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Scan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[c7]"></a>generate_random_number</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cw.o(i.generate_random_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = generate_random_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[ae]"></a>insertMorseCode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cw.o(i.insertMorseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = insertMorseCode &rArr;  insertMorseCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertMorseCode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createMorseTree
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MorseTree_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertMorseCode
</UL>

<P><STRONG><a name="[cb]"></a>letter2MorseCode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cw.o(i.letter2MorseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = letter2MorseCode &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
</UL>

<P><STRONG><a name="[df]"></a>letter2num</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cw.o(i.letter2num))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 1282 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = main &rArr; OLED_Show3FNum &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter2num
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_VolumeDisplay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ShowMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SendSpeedDisplay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_MorceCode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_EarPhoneCheck
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawDitDah
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_AutoSaveSetting
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar_2216
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCH_16
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearStr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Scan
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Flash_Read_Info
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9d]"></a>my_fabs</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_adc.o(i.my_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = my_fabs &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(i.mypow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[c8]"></a>num2letter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cw.o(i.num2letter))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[a7]"></a>searchMorseCode</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, cw.o(i.searchMorseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = searchMorseCode &rArr;  searchMorseCode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchMorseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchMorseCode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCharFromMorseCode
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc2Voltage_mV
</UL>

<P><STRONG><a name="[e1]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e5]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_fabs
</UL>

<P><STRONG><a name="[e4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[128]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc2Voltage_mV
</UL>

<P><STRONG><a name="[e6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[e7]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_fabs
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc2Voltage_mV
</UL>

<P><STRONG><a name="[e8]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
</UL>

<P><STRONG><a name="[ea]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f0]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
</UL>

<P><STRONG><a name="[ed]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init
</UL>

<P><STRONG><a name="[ee]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[b9]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[f3]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show3FNum
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EarPhone_WAVE
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RandType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ListenType
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_BlindType
</UL>

<P><STRONG><a name="[f1]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[e9]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[e2]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_EarPhoneCheck
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DrawBattery
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c4]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_ch32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72_HSE
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c5]"></a>SetSysClockTo72_HSE</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_ch32f10x.o(i.SetSysClockTo72_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f5]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[eb]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
